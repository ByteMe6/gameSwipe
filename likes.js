// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const loggedInUser = localStorage.getItem('loggedInUser');
    if (!loggedInUser) {
        window.location.href = './login/emailLogin.html';
        return null;
    }
    return loggedInUser;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function renderUnauthorized(container) {
    container.innerHTML = `
        <div class="unauthorized-container">
            <h2>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
            <p>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.</p>
            <a href="./login/emailLogin.html" class="btn btn-primary">–í–æ–π—Ç–∏</a>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–π–∫–æ–≤
async function renderLikes() {
    const main = document.getElementById('main');
    if (!main) return;

    const loggedInUser = localStorage.getItem('loggedInUser');
    if (!loggedInUser) {
        main.innerHTML = `
            <div class="unauthorized-container">
                <h2>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏</h2>
                <a href="./login/emailLogin.html" class="btn btn-primary">–í–æ–π—Ç–∏</a>
            </div>
        `;
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–π–∫–∏
    const allLikes = JSON.parse(localStorage.getItem(`likes_${loggedInUser}`) || '[]');
    const otherUsersLikes = [];
    const mutualLikes = [];
    const myLikes = [];

    // –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = JSON.parse(localStorage.getItem('appUsers') || '[]');
    users.forEach(user => {
        if (user.username === loggedInUser) return;
        const userLikes = JSON.parse(localStorage.getItem(`likes_${user.username}`) || '[]');
        const likesToMe = userLikes.filter(like => like.userId === loggedInUser);
        if (likesToMe.length > 0) {
            otherUsersLikes.push({ username: user.username, ...likesToMe[0] });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
            const iMutuallyLiked = allLikes.some(myLike => myLike.userId === user.id);
            if (iMutuallyLiked) {
                mutualLikes.push({ username: user.username, ...likesToMe[0] });
            }
        }
    });

    main.innerHTML = `
        <div class="likes-container">
            <section class="likes-section mutual-likes">
                <h2><i class="bi bi-heart-fill"></i> –í–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏</h2>
                ${mutualLikes.length > 0 ? `
                    <div class="likes-grid">
                        ${mutualLikes.map(user => `
                            <div class="like-card mutual" data-user-id="${user.userId}">
                                <img src="${user.avatar}" alt="${user.username}'s avatar" class="like-avatar">
                                <div class="like-info">
                                    <h3>${user.username}</h3>
                                    <p class="aBitGray">–í–æ–∑—Ä–∞—Å—Ç: ${user.age}</p>
                                    <p class="${user.status === 'online' ? 'status-online' : 'status-offline'} aBitGray">
                                        ${user.status === 'online' ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'}
                                    </p>
                                    <p class="like-date aBitGray">
                                        –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω: ${new Date(user.timestamp).toLocaleDateString()}
                                    </p>
                                    <button class="btn btn-success chat-button" data-user-id="${user.userId}">
                                        <i class="bi bi-chat-dots"></i> –ù–∞–ø–∏—Å–∞—Ç—å
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                ` : `
                    <div class="no-likes">
                        <h3>–ü–æ–∫–∞ –Ω–µ—Ç –≤–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π üí´</h3>
                        <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è, –∏ —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≤–∞—à–∏ –ø–µ—Ä–≤—ã–µ –≤–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏!</p>
                    </div>
                `}
            </section>

            <section class="likes-section received-likes">
                <h2><i class="bi bi-heart"></i> –í–∞—Å –æ—Ç–º–µ—Ç–∏–ª–∏</h2>
                ${otherUsersLikes.length > 0 ? `
                    <div class="likes-grid">
                        ${otherUsersLikes.map(user => `
                            <div class="like-card liked-by" data-user-id="${user.userId}">
                                <img src="${user.avatar}" alt="${user.username}'s avatar" class="like-avatar">
                                <div class="like-info">
                                    <h3>${user.username}</h3>
                                    <p class="aBitGray">–í–æ–∑—Ä–∞—Å—Ç: ${user.age}</p>
                                    <p class="${user.status === 'online' ? 'status-online' : 'status-offline'} aBitGray">
                                        ${user.status === 'online' ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'}
                                    </p>
                                    <p class="like-date aBitGray">
                                        –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω: ${new Date(user.timestamp).toLocaleDateString()}
                                    </p>
                                    <div class="like-actions">
                                        <button class="btn btn-success like-button" data-user-id="${user.userId}">
                                            <i class="bi bi-heart-fill"></i> –õ–∞–π–∫
                                        </button>
                                        <button class="btn btn-outline-primary view-profile" data-user-id="${user.userId}">
                                            <i class="bi bi-eye"></i> –ü—Ä–æ—Ñ–∏–ª—å
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                ` : `
                    <div class="no-likes">
                        <h3>–ü–æ–∫–∞ –≤–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª ‚ú®</h3>
                        <p>–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ–±—â–∞–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ - –ª–∞–π–∫–∏ –Ω–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Å–µ–±—è –∂–¥–∞—Ç—å.</p>
                    </div>
                `}
            </section>

            <section class="likes-section given-likes">
                <h2><i class="bi bi-heart"></i> –í–∞—à–∏ –æ—Ç–º–µ—Ç–∫–∏</h2>
                ${allLikes.length > 0 ? `
                    <div class="likes-grid">
                        ${allLikes.map(user => `
                            <div class="like-card" data-user-id="${user.userId}">
                                <img src="${user.avatar}" alt="${user.username}'s avatar" class="like-avatar">
                                <div class="like-info">
                                    <h3>${user.username}</h3>
                                    <p class="aBitGray">–í–æ–∑—Ä–∞—Å—Ç: ${user.age}</p>
                                    <p class="${user.status === 'online' ? 'status-online' : 'status-offline'} aBitGray">
                                        ${user.status === 'online' ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'}
                                    </p>
                                    <p class="like-date aBitGray">
                                        –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω: ${new Date(user.timestamp).toLocaleDateString()}
                                    </p>
                                    <button class="btn btn-outline-primary view-profile" data-user-id="${user.userId}">
                                        <i class="bi bi-eye"></i> –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                ` : `
                    <div class="no-likes">
                        <h3>–í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ üéÆ</h3>
                        <p>–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–µ—Ö, —Å –∫–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–∏–≥—Ä–∞—Ç—å!</p>
                    </div>
                `}
            </section>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const viewProfileButtons = main.querySelectorAll('.view-profile');
    viewProfileButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const userId = e.target.closest('.view-profile').dataset.userId;
            const user = users.find(u => u.id === userId);
            if (user) {
                window.location.href = `./profile.html?user=${user.username}`;
            }
        });
    });

    const chatButtons = main.querySelectorAll('.chat-button');
    chatButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const userId = e.target.closest('.chat-button').dataset.userId;
            const user = users.find(u => u.id === userId);
            if (user) {
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç
                Toastify({
                    text: `–ß–∞—Ç —Å ${user.username} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!`,
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    className: "info"
                }).showToast();
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–∞–π–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –º–Ω–µ"
    const likeButtons = main.querySelectorAll('.like-button');
    likeButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const userId = e.target.closest('.like-button').dataset.userId;
            const user = users.find(u => u.id === userId);
            
            if (user) {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const currentLikes = JSON.parse(localStorage.getItem(`likes_${loggedInUser}`) || '[]');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∞–π–∫–Ω—É–ª –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const alreadyLiked = currentLikes.some(like => like.userId === user.id);
                
                if (!alreadyLiked) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∞–π–∫
                    const newLike = {
                        userId: user.id,
                        timestamp: new Date().toISOString()
                    };
                    
                    currentLikes.push(newLike);
                    localStorage.setItem(`likes_${loggedInUser}`, JSON.stringify(currentLikes));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
                    const otherUserLikes = JSON.parse(localStorage.getItem(`likes_${user.username}`) || '[]');
                    const isMutual = otherUserLikes.some(l => l.userId === loggedInUser);
                    
                    if (isMutual) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ
                        Toastify({
                            text: `–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å ${user.username}!`,
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            className: "success"
                        }).showToast();
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è"
                        setTimeout(() => {
                            renderLikes();
                        }, 1000);
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
                        Toastify({
                            text: `–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`,
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            className: "success"
                        }).showToast();
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        setTimeout(() => {
                            renderLikes();
                        }, 1000);
                    }
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –ª–∞–π–∫ —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω
                    Toastify({
                        text: `–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        className: "info"
                    }).showToast();
                }
            }
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    const main = document.getElementById('main');
    if (!main) return;

    const loggedInUser = localStorage.getItem('loggedInUser');
    if (!loggedInUser) {
        main.innerHTML = `
            <div class="unauthorized-container">
                <h2>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏</h2>
                <a href="./login/emailLogin.html" class="btn btn-primary">–í–æ–π—Ç–∏</a>
            </div>
        `;
        return;
    }

    try {
        const response = await fetch("./database.json");
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        const db = await response.json();

        // –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userLikes = JSON.parse(localStorage.getItem(`likes_${loggedInUser}`) || '[]');
        const userDislikes = JSON.parse(localStorage.getItem(`dislikes_${loggedInUser}`) || '[]');

        // –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const likedByUsers = db.users.filter(user => {
            const theirLikes = JSON.parse(localStorage.getItem(`likes_${user.username}`) || '[]');
            return theirLikes.some(like => like.userId === loggedInUser);
        });

        // –ù–∞—Ö–æ–¥–∏–º –≤–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏
        const mutualLikes = likedByUsers.filter(user => 
            userLikes.some(like => like.userId === user.id)
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        let html = '<div class="likes-container">';

        // –°–µ–∫—Ü–∏—è –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤
        html += `
            <div class="likes-section">
                <h2>–í–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏</h2>
                <div class="likes-grid">
                    ${mutualLikes.length ? mutualLikes.map(user => `
                        <div class="like-card mutual">
                            <img src="${user.avatar}" alt="${user.username}" class="like-avatar">
                            <div class="like-info">
                                <h3>${user.username}</h3>
                                <p class="like-date">–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è</p>
                            </div>
                            <div class="like-actions">
                                <button class="dislike-button" data-user-id="${user.id}">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                        </div>
                                            `).join('') : '<p class="no-likes">–ù–µ—Ç—É –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–æ–∫–≤</p>'}
                </div>
            </div>
        `;

        // –°–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const likedByNotMutual = likedByUsers.filter(user => 
            !mutualLikes.some(mutual => mutual.id === user.id)
        );

        html += `
            <div class="likes-section">
                <h2>–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏</h2>
                <div class="likes-grid">
                    ${likedByNotMutual.length ? likedByNotMutual.map(user => `
                        <div class="like-card liked-by">
                            <img src="${user.avatar}" alt="${user.username}" class="like-avatar">
                            <div class="like-info">
                                <h3>${user.username}</h3>
                                <p class="like-date">–õ–∞–π–∫–Ω—É–ª(–∞) –≤–∞—Å</p>
                            </div>
                            <div class="like-actions">
                                <button class="like-button" data-user-id="${user.id}">
                                    <i class="bi bi-heart"></i>
                                </button>
                                <button class="dislike-button" data-user-id="${user.id}">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                        </div>
                    `).join('') : '<p class="no-likes">–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ª–∞–π–∫</p>'}
                </div>
            </div>
        `;

        // –°–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –ª–∞–π–∫–Ω—É–ª —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const likedByMe = db.users.filter(user => 
            userLikes.some(like => like.userId === user.id) &&
            !mutualLikes.some(mutual => mutual.id === user.id)
        );

        html += `
            <div class="likes-section">
                <h2>–í—ã –ª–∞–π–∫–Ω—É–ª–∏</h2>
                <div class="likes-grid">
                    ${likedByMe.length ? likedByMe.map(user => `
                        <div class="like-card">
                            <img src="${user.avatar}" alt="${user.username}" class="like-avatar">
                            <div class="like-info">
                                <h3>${user.username}</h3>
                                <p class="like-date">–í—ã –ª–∞–π–∫–Ω—É–ª–∏</p>
                            </div>
                            <div class="like-actions">
                                <button class="dislike-button" data-user-id="${user.id}">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                        </div>
                    `).join('') : '<p class="no-likes">–í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª–∏</p>'}
                </div>
            </div>
        `;

        html += '</div>';
        main.innerHTML = html;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.like-button, .dislike-button').forEach(button => {
            button.addEventListener('click', async (e) => {
                const userId = e.currentTarget.dataset.userId;
                const isLike = e.currentTarget.classList.contains('like-button');
                const user = db.users.find(u => u.id === userId);

                if (!user) return;

                if (isLike) {
                    const newLike = {
                        userId: user.id,
                        timestamp: new Date().toISOString()
                    };
                    const currentLikes = JSON.parse(localStorage.getItem(`likes_${loggedInUser}`) || '[]');
                    currentLikes.push(newLike);
                    localStorage.setItem(`likes_${loggedInUser}`, JSON.stringify(currentLikes));

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
                    const theirLikes = JSON.parse(localStorage.getItem(`likes_${user.username}`) || '[]');
                    const isMutual = theirLikes.some(like => like.userId === loggedInUser);

                    Toastify({
                        text: isMutual ? `–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å ${user.username}!` : `–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        className: isMutual ? "success" : "info"
                    }).showToast();
                } else {
                    // –î–∏–∑–ª–∞–π–∫
                    const currentDislikes = JSON.parse(localStorage.getItem(`dislikes_${loggedInUser}`) || '[]');
                    const newDislike = {
                        userId: user.id,
                        timestamp: new Date().toISOString()
                    };
                    currentDislikes.push(newDislike);
                    localStorage.setItem(`dislikes_${loggedInUser}`, JSON.stringify(currentDislikes));

                    // –£–¥–∞–ª—è–µ–º –ª–∞–π–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
                    const currentLikes = JSON.parse(localStorage.getItem(`likes_${loggedInUser}`) || '[]');
                    const updatedLikes = currentLikes.filter(like => like.userId !== user.id);
                    localStorage.setItem(`likes_${loggedInUser}`, JSON.stringify(updatedLikes));

                    Toastify({
                        text: `–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        className: "info"
                    }).showToast();
                }

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
                setTimeout(() => location.reload(), 500);
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        main.innerHTML = '<p class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
    }
}); 